import numpy as np

import BaseModel as BaseModel

class WageningenPropeller(BaseModel.BaseModel):
	''' Empirical model for the thrust, torque and efficiency for the Wageningen B-series '''

	def __init__(self, D, PD, AEA0, Z, rho=1025.9):
		super().__init__(D, PD, AEA0, Z, rho=rho)

		# -------- Set in coefficients ---------------

		self.KTpolynomial = np.array([[ 0.008804960, 0, 0, 0, 0], [-0.204554000, 1, 0, 0, 0], [ 0.166351000, 0, 1, 0, 0],
									  [ 0.158114000, 0, 2, 0, 0], [-0.147581000, 2, 0, 1, 0], [-0.481497000, 1, 1, 1, 0],
									  [ 0.415437000, 0, 2, 1, 0], [ 0.014404300, 0, 0, 0, 1], [-0.053005400, 2, 0, 0, 1],
									  [ 0.014348100, 0, 1, 0, 1], [ 0.060682600, 1, 1, 0, 1], [-0.012589400, 0, 0, 1, 1],
									  [ 0.010968900, 1, 0, 1, 1], [-0.133698000, 0, 3, 0, 0], [ 0.006384070, 0, 6, 0, 0],
									  [-0.001327180, 2, 6, 0, 0], [ 0.168496000, 3, 0, 1, 0], [-0.050721400, 0, 0, 2, 0],
									  [ 0.085455900, 2, 0, 2, 0], [-0.050447500, 3, 0, 2, 0], [ 0.010465000, 1, 6, 2, 0],
									  [-0.006482720, 2, 6, 2, 0], [-0.008417280, 0, 3, 0, 1], [ 0.016842400, 1, 3, 0, 1],
									  [-0.001022960, 3, 3, 0, 1], [-0.031779100, 0, 3, 1, 1], [ 0.018604000, 1, 0, 2, 1],
									  [-0.004107980, 0, 2, 2, 1], [-0.000606848, 0, 0, 0, 2], [-0.004981900, 1, 0, 0, 2],
									  [ 0.002598300, 2, 0, 0, 2], [-0.000560528, 3, 0, 0, 2], [-0.001636520, 1, 2, 0, 2],
									  [-0.000328787, 1, 6, 0, 2], [ 0.000116502, 2, 6, 0, 2], [ 0.000690904, 0, 0, 1, 2],
									  [ 0.004217490, 0, 3, 1, 2], [ 5.65229E-05, 3, 6, 1, 2], [-0.001465640, 0, 3, 2, 2] ])

		self.n_KT = len(self.KTpolynomial)

		self.KQpolynomial = np.array([[ 0.003793680, 0, 0, 0, 0], [ 0.008865230, 2, 0, 0, 0], [-0.032248000, 1, 1, 0, 0],
									  [ 0.003447780, 0, 2, 0, 0], [-0.040881100, 0, 1, 1, 0], [-0.108009000, 1, 1, 1, 0],
									  [-0.088538100, 2, 1, 1, 0], [ 0.188561000, 0, 2, 1, 0], [-0.003708710, 1, 0, 0, 1],
									  [ 0.005136960, 0, 1, 0, 1], [ 0.020944900, 1, 1, 0, 1], [ 0.004743190, 2, 1, 0, 1],
									  [-0.007234080, 2, 0, 1, 1], [ 0.004383880, 1, 1, 1, 1], [-0.026940300, 0, 2, 1, 1],
									  [ 0.055808200, 3, 0, 1, 0], [ 0.016188600, 0, 3, 1, 0], [ 0.003180860, 1, 3, 1, 0],
									  [ 0.015896000, 0, 0, 2, 0], [ 0.047172900, 1, 0, 2, 0], [ 0.019628300, 3, 0, 2, 0],
									  [-0.050278200, 0, 1, 2, 0], [-0.030055000, 3, 1, 2, 0], [ 0.041712200, 2, 2, 2, 0],
									  [-0.039772200, 0, 3, 2, 0], [-0.003500240, 0, 6, 2, 0], [-0.010685400, 3, 0, 0, 1],
									  [ 0.001109030, 3, 3, 0, 1], [-0.000313912, 0, 6, 0, 1], [ 0.003598500, 3, 0, 1, 1],
									  [-0.001421210, 0, 6, 1, 1], [-0.003836370, 1, 0, 2, 1], [ 0.012680300, 0, 2, 2, 1],
									  [-0.003182780, 2, 3, 2, 1], [ 0.003342680, 0, 6, 2, 1], [-0.001834910, 1, 1, 0, 2],
									  [ 0.000112451, 3, 2, 0, 2], [-2.97228E-05, 3, 6, 0, 2], [ 0.000269551, 1, 0, 1, 2],
									  [ 0.000832650, 2, 0, 1, 2], [ 0.001553340, 0, 2, 1, 2], [ 0.000302683, 0, 6, 1, 2],
									  [-0.000184300, 0, 0, 2, 2], [-0.000425399, 0, 3, 2, 2], [ 8.69243E-05, 3, 3, 2, 2],
									  [-0.000465900, 0, 6, 2, 2], [ 5.54194E-05, 1, 6, 2, 2] ])

		self.n_KQ = len(self.KQpolynomial)

		self.J_max = np.inf
		self.J_max = self.findMaxJ()

	def KT(self, J):
		KT = 0

		if J < self.J_max:
			for i in range(self.n_KT):
				A_abcd = self.KTpolynomial[i, 0]
				a      = self.KTpolynomial[i, 1]
				b      = self.KTpolynomial[i, 2]
				c      = self.KTpolynomial[i, 3]
				d      = self.KTpolynomial[i, 4]

				KT += A_abcd * (J**a) * (self.PD**b) * (self.AEA0**c) * (self.Z**d)

		return KT

	def KQ(self, J):
		KQ = 0

		for i in range(self.n_KQ):
			B_abcd = self.KQpolynomial[i, 0]
			a      = self.KQpolynomial[i, 1]
			b      = self.KQpolynomial[i, 2]
			c      = self.KQpolynomial[i, 3]
			d      = self.KQpolynomial[i, 4]

			KQ += B_abcd * (J**a) * (self.PD**b) * (self.AEA0**c) * (self.Z**d)

		return KQ
